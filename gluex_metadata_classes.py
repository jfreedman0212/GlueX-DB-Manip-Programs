# these classes define the data for the gluex database
import os
import sys
import consts
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
Base = declarative_base()

# these are the sqlalchemy classes for the gluex database as laid out in the schema
class DataType(Base):
	__tablename__ = 'DataType'
	id = Column(Integer, primary_key=True)
	name = Column(String(250)) 
	comment = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}\n'.format(self.id,self.name,self.comment)
	def __init__(self,n='none',c='none'):
		super(DataType,self).__init__()
		self.name = n
		self.comment = c
class RunPeriod(Base):
	__tablename__ = 'RunPeriod'
	id = Column(Integer, primary_key=True)
	name = Column(String(250))
	comment = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}\n'.format(self.id,self.name,self.comment)
	def __init__(self,n='none',c='none'):
		super(RunPeriod,self).__init__()
		self.name = n
		self.comment = c
class SoftwareVersion(Base):
	__tablename__ = 'SoftwareVersion'
	id = Column(Integer, primary_key=True)
	name = Column(String(250))
	comment = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}\n'.format(self.id,self.name,self.comment)
	def __init__(self,n='none',c='none'):
		super(SoftwareVersion,self).__init__()
		self.name = n
		self.comment = c
class JanaConfig(Base):
	__tablename__ = 'JanaConfig'
	id = Column(Integer, primary_key=True)
	name = Column(String(250))
	comment = Column(String(250))
	content = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}\ncontent: {}\n'.format(self.id,self.name,self.comment,self.content)
	def __init__(self,n='none',c='none',ct='none'):
		super(JanaConfig,self).__init__()
		self.name = n
		self.comment = c
		self.content= ct
class JanaCalibContext(Base):
	__tablename__ = 'JanaCalibContext'
	id = Column(Integer, primary_key = True)
	value = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nvalue: {}\n'.format(self.id,self.value)
	def __init__(self,v='none'):
		super(JanaCalibContext,self).__init__()
		self.value = v
class DataSet(Base):
	__tablename__ = 'DataSet'
	id = Column(Integer, primary_key = True)
	nickname = Column(String(250))
	dataTypeId = Column(Integer, ForeignKey('DataType.id'))
	revision = Column(String(250))
	runPeriodId = Column(Integer, ForeignKey('RunPeriod.id'))
	softwareVersionId = Column(Integer, ForeignKey('SoftwareVersion.id'))
	janaConfigId = Column(Integer, ForeignKey('JanaConfig.id'))
	janaCalibContextId = Column(Integer, ForeignKey('JanaCalibContext.id'))
	
	# maybe dont have this as a column, but rather something that can be generated by a function?
	versionStringTag = Column(String(250))

	def __init__(self,nn='Empty DataSet',dt=1,r=1,rp=1,sv=1,jc=1,jcc=1,vst='empty'):
		super(DataSet,self).__init__()
		self.nickname = nn
		self.dataTypeId = dt
		self.revision = r
		self.runPeriodId = rp
		self.softwareVersionId = sv
		self.janaConfigId = jc
		self.janaCalibContext = jcc
		self.versionStringTag = vst
	
	# if you would like a more advanced representation
	# of a DataSet (i.e. shows the foreign keys rather
	# than the names that they refer to), use this.
	def __str__(self):
		return 'id: {}\n \
			nickname: {}\n \
			dataTypeId: {}\n \
			revision: {}\n \
			runPeriodId: {}\n \
			softwareVersionId: {}\n \
			janaConfigId: {}\n \
			janaCalibContext: {}\n \
			versionStringTag: {}\n' \
			.format(self.id,self.nickname,self.dataTypeId,self.revision, \
				self.runPeriodId,self.softwareVersionId,self.janaConfigId, \
				self.janaCalibContext,self.versionStringTag)
	
	# if you would like to get a readable version of this object that
	# refers to the names of the attributes rather than the
	# foreign keys, use this.

	# sess is the session variable
	def getReadableString(self,sess):
		pass

#engine setup
engine = create_engine('sqlite:///{}'.format(os.environ[consts.DB_ENV_VAR]))
Base.metadata.create_all(engine)

# session setup
Base.metadata.bind = engine
DBSession = sessionmaker(bind=engine)
session = DBSession()
