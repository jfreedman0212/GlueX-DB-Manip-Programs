# these classes define the data for the gluex database
import os
import sys
import consts
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine

Base = declarative_base()

# these are the sqlalchemy classes for the gluex database as laid out in the schema
class DataType(Base):
	__tablename__ = 'DataType'
	id = Column(Integer, primary_key=True)
	name = Column(String(250)) 
	comment = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}'.format(self.id,self.name,self.comment)
	def __init__(self,n='none',c='none'):
		super(DataType,self).__init__()
		self.name = n
		self.comment = c
class RunPeriod(Base):
	__tablename__ = 'RunPeriod'
	id = Column(Integer, primary_key=True)
	name = Column(String(250))
	comment = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}'.format(self.id,self.name,self.comment)
	def __init__(self,n='none',c='none'):
		super(RunPeriod,self).__init__()
		self.name = n
		self.comment = c
class SoftwareVersion(Base):
	__tablename__ = 'SoftwareVersion'
	id = Column(Integer, primary_key=True)
	name = Column(String(250))
	comment = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}'.format(self.id,self.name,self.comment)
	def __init__(self,n='none',c='none'):
		super(SoftwareVersion,self).__init__()
		self.name = n
		self.comment = c
class JanaConfig(Base):
	__tablename__ = 'JanaConfig'
	id = Column(Integer, primary_key=True)
	name = Column(String(250))
	comment = Column(String(250))
	content = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nname: {}\ncomment: {}\ncontent: {}'.format(self.id,self.name,self.comment,self.content)
	def __init__(self,n='none',c='none',ct='none'):
		super(JanaConfig,self).__init__()
		self.name = n
		self.comment = c
		self.content= ct
class JanaCalibContext(Base):
	__tablename__ = 'JanaCalibContext'
	id = Column(Integer, primary_key = True)
	value = Column(String(250))
	dataSet = relationship('DataSet')
	def __str__(self):
		return 'id: {}\nvalue: {}'.format(self.id,self.value)
	def __init__(self,v='none'):
		super(JanaCalibContext,self).__init__()
		self.value = v
# this class should be right? i might need to add relationships to these (one to one i believe)
# also determine how to format the __str__() function
class DataSet(Base):
	__tablename__ = 'DataSet'
	id = Column(Integer, primary_key = True)
	nickname = Column(String(250))
	dataTypeId = Column(Integer, ForeignKey('DataType.id'))
	revision = Column(String(250))
	runPeriodId = Column(Integer, ForeignKey('RunPeriod.id'))
	softwareVersionId = Column(Integer, ForeignKey('SoftwareVersion.id'))
	janaConfigId = Column(Integer, ForeignKey('JanaConfig.id'))
	janaCalibContextId = Column(Integer, ForeignKey('JanaCalibContext.id'))
	
	# maybe dont have this as a column, but rather something that can be generated by a function?
	versionStringTag = Column(String(250))
	def getVersionStringTag(self):
		pass

	def __init__(self):
		super(DataSet,self).__init__()
		

engine = create_engine('sqlite:///{}'.format(str(os.environ[consts.DB_ENV_VAR])))
Base.metadata.create_all(engine)
